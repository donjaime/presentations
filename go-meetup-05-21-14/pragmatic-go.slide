
A pragmatic look at the language design of Go

21 May 2014

Jaime Yap
Developer, FullStory
jaime@thefullstory.com
https://github.com/donjaime

###########
# SLIDE 1
###########
* Who am i

.html files/fullstory.html

###########
# SLIDE 2
###########
* The w00ts and the Wats (but mostly w00ts)

# Yes Go is Compiled. Spits out a binary that's easy to deploy.
# And Go programs tend to have a Low memory baseline, ship with great profiling tools and all that.
# But isn't a talk about the tooling or the runtime. This is a talk about the design of the Go language itself. This can be fuel for language holy wars, but hopefully we can skip past all that :).

- The essence of Go.
# Talk about some of the core insights, language design decisions, and philosophies that went in to the design of Go. I say that like I worked on Go with Rob Pike, but I didnt :). This is mostly background that adds color to any conversation about the language.

- Interfaces and the Type System.
# We'll cover the type system. What an interface is. And why they are cool.

- A few interesting (and hopefully useful) design patterns.
# We'll also show some code samples.

- The Wats (and how to mitigate them).
# As awesome as Go is, it is not without its flaws. So there are a few "Wats" that are worth mentioning, along with strategies to mitigate them.

.image files/images/gopher.png


###########
# SLIDE 3
###########
* Not A Concurrency Talk
- Yes. I'm covering concurrency :). 
# Can't do a language talk about Go without covering concurrency.

- But this is not a deep dive.
# Though I will touch on concurrency (it's essential to the language design). This is not a deep dive on the topic.

- Some better, more in-depth resources for Go concurrency:

Concurrency Patterns in Go
.link https://code.google.com/p/go-wiki/wiki/GoTalks
.link https://www.youtube.com/watch?v=f6kdp27TYZs
.link http://blog.golang.org/pipelines

Advanced concurrency patterns in Go
.link http://blog.golang.org/advanced-go-concurrency-patterns
.link http://talks.golang.org/2013/advconc.slide


###########
# SLIDE 4
###########
* The Essence Of Go
# Go started out as a project by a bunch of C guys, who wanted to design a replacement for C++ at Google. But to their surprise, they ended up making a language that was loved by Python and Ruby programmers.

Less is exponentially more - Rob Pike

.link http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html

# Philosophically, Go is all about Less is exponentially more. But more concretely, how this manifests in the language is...

- Separation of data and interfaces.

- Composition.
# Recurring theme in Go. Spans everything from implementation inheritance to concurrency.

- Explicit control flow.
# No magic destructors or non-local side-effects. No constructors. No non-local error handling.

- Convention and simplicity over language bloat.
# Language features interact with eachother on the order of the cross product of the number of features. Often in unexpected ways. 

# You’ll see this manifest from everything from visibility to error handling. Go wants you to do things one way, which helps to make code you didn’t write, easier to grok.

# The features that have been brought into the language are very intentional. 

# You get as a side effect, a fast compiler.

- Simple[r] concurrency.
# Modern language designed for building concurrent services, with multi-core architectures in mind.

- Usecase driven Core Libraries. Designed with a purpose.
# Not really language design so to speak. Kinda sneaking this one in there. But I think it's worth mentioning. the libraries in Go are ruthlessly pragmatic.


###########
# SLIDE 5
###########
* The Essence Of Go (Separation of data and interfaces) 

_"Bad_programmers_worry_about_the_code._Good_programmers_worry_about_data_structures_and_their_relationships."_ 
- Linus Torvalds


_"Show_me_your_flowchart_and_conceal_your_tables,_and_I_shall_continue_to_be_mystified._Show_me_your_tables,_and_I_won't_usually_need_your_flowchart;_it'll_be_obvious."_
- Fred Brooks, The Mythical Man-Month.


_"Smart_data_structures_and_dumb_code_works_a_lot_better_than_the_other_way_around."_
- Eric S. Raymond, The Cathedral and The Bazaar.


###########
# SLIDE 6
###########
* The Essence Of Go (Separation of data and interfaces) 

- Model your data first. 

- Then consider interfaces, afterward, as communicating capability.

- Changes the way you model your programs.

- More code ends up just being functions operating on structs, instead of overly abstracted like in typical OO.

_"My_late_friend_Alain_Fournier_once_told_me_that_he_considered_the_lowest_form_of_academic_work_to_be_taxonomy._And_you_know_what?_Type_hierarchies_are_just_taxonomy"_ - Rob Pike

# I'm not dissing OO in general. Or that type hierarchies are always wrong. I'm just saying that it shouldn't be the only tool in your toolchest. Or maybe not even the first one you draw upon.


###########
# SLIDE 7
###########
* The Essence Of Go (Separation of data and interfaces)

"But code re-use and DRY matter when architecting your programs. If Go doesn’t follow traditional OO, how can we accomplish that which explicit implementation inheritance does?"

- Go does this via composition, but without the boilerplate (via struct embedding).

- No virtual dispatch by design. 
# Some people want it, but in the spirit of "simpler means fewer compounding edge cases", Go chose to avoid it entirely.
# Virtual dispatch has a bunch of sharp corners. C++ destructors calling virtual methods. Java calling out to overridden methods that reference uninitialized state in constructors. etc...

.code files/composition.go


###########
# SLIDE 8
###########
* The Type System
- The Go Type System hinges around the concept of the Go *Interface*.

- Go's interfaces are static, checked at compile time, yet dynamic when you ask them to be.

- Go Intefaces support _"Duck_Typing"_.
# Implementing interfaces are implicit.

- Go Intefaces can _compose_other_interfaces_.

- Go Intefaces can specify a _subset_ of some other larger interface.

- Use Interfaces when you want to communicate *Capability*.


###########
# SLIDE 9
###########
* The Type System
# Go interfaces are implicitly implemented. Here we have an example of Interface composition.
.code files/interfaces.go


###########
# SLIDE 10
###########
* The Type System
.image files/images/interfaces-icp.png 449 800

# So go interfaces support duck typing. Composition. Subsetting. Dynamic casting. Reflection. Are statically checked by the compiler. How the heck does that work?


###########
# SLIDE 11
###########
* The Type System
- Types (structs, functions, primitives) define the memory layout of some blob.

.image files/images/gointer1.png

- Interfaces are 2 words. A pointer to an itable, and a pointer to data.

.image files/images/gointer2.png

.link http://research.swtch.com/interfaces

# itables -> Languages with methods typically fall into one of two camps: prepare the tables for all the method calls statically (as in C++ and Java), or do a method lookup at each call (as in Smalltalk and dynamic languages like JavaScript and Python) and add fancy caching to make that call efficient. Go sits halfway between the two: it has precomputed method tables but it derives the final itable at run time, and then caches the result.

# The reason it does this is that Go supports dynamic type conversions. It mean that it isn't reasonable for the compiler or linker to permute all possible itables: there are too many (interface type, concrete type) pairs, and most won't be needed. 

# The interface runtime computes the itable by looking for each method listed in the interface type's method table, in the concrete type's method table. The runtime caches the itable after generating it, so that this correspondence need only be computed once.


###########
# SLIDE 12
###########
* A Note on method lookup Performance
  1   var any interface{}  // initialized elsewhere
  2   s := any.(Stringer)  // dynamic conversion
  3   for i := 0; i < 100; i++ {
  4       fmt.Println(s.String())
  5   }

- The itable gets computed (or found in a cache) during the assignment on line 2

# In Go, the itable gets computed (or found in a cache) during the assignment on line 2; the dispatch for the s.String() call executed on line 4 is a couple of memory fetches and a single indirect call instruction.

- Smalltalk (or JavaScript, or Python, or ...) would do the method lookup at line 4, which in a loop repeats needless work. 

# In contrast, the implementation of this program in a dynamic language like Smalltalk (or JavaScript, or Python, or ...) would do the method lookup at line 4, which in a loop repeats needless work. 

# The cache mentioned earlier makes this less expensive than it might be, but it's still more expensive than a single indirect call instruction.


###########
# SLIDE 13
###########
* Concurrency

###########
# SLIDE 14
###########
* Concurrency
- Communicating Sequential Processes (CSP).
# Based on message passing via channels.

- Continues the theme of composition. The composition of independently executing computations.

- "User space threads". Low cost of switching.
# No need to go through the kernel and cross protection ring.
# Technically things like Java can implement user space threads, however, in practice it renders much of the Java ecosystem unusable since they don't mix with the standard threading model.

- 4K stack per goroutine. Low memory overhead.

- Cooperative scheduling that yields on I/O and some function calls.

- Use Go routines without needing to worry about blocking I/O. 
# Ever written a multi-threaded server in Java know how painful it can be sharing a small number of threads.

- Magnificent synchronization primitives in the form of channels and selects.

- More traditional mutexes, semaphores, etc... when you need it.


###########
# SLIDE 15
###########
* So....
.image files/images/whatdoesitmean.jpg 449 800


###########
# SLIDE 16
###########
* Some Design Patterns


###########
# SLIDE 17
###########
* The Unimplementable Public Interface
- You almost never want to do this. Except when you do (eg. union types).
- Java can't do this (at least not easily).
- Still mockable in tests.
# When you want to create an interface that has a finite number of possible concrete types, which means you can safely use it by type selections onto those types. Go doesn't actually have union types. But this is a useful idiom in the absence of an actual union type.

.code files/unimplementable.go


###########
# SLIDE 18
###########
* Interface Subsetting 
- Subset of an interface *without*having*to*change*the*type*hierarchy*

.code files/subinterface.go
# You can pass a reference to LostOfStuff to any method that takes a ThePartsICareAbout since it will implicitly implement the interface.


###########
# SLIDE 19
###########
* Pimp My Interface Pattern
# So we know structs can anonymously embed other structs and inherit their interfaces. But structs can also embed interfaces. Without necessarily being aware of the concrete receiver.
# Similar to what you would do in Java by subclassing or extending an interface.
(embedding interfaces in structs and overriding methods)

.code files/pimp.go


###########
# SLIDE 20
###########
* The Simple HTTP Server

.code files/functypealias.go

- Can we make it even simpler?


###########
# SLIDE 21
###########
* Functions as types 
- Function literals and closures.
- We can assign type aliases to function signatures.
- That can then implement interfaces.
- Type Aliasing is awesome.

.code files/functypealias2.go


###########
# SLIDE 22
###########
* Functions as types (part deux)
- Functional progamming is enhanced by type aliasing.
- Two functions can have the same *signature*, but mean semantically different things.
- Having multiple parameters to a function with the same type opens you up to programmer error.

.code files/functypealias3.go


###########
# SLIDE 23
###########
* Slices can be aliased too!
- API sugar.

- Type Aliasing is awesome :).

.code files/slicetypealias.go


###########
# SLIDE 24
###########
* Easy Parallelization
- Fork - merge 

.code files/forkmerge.go

###########
# SLIDE 25
###########
* Easy Parallelization (Fork-merge continued)
# Extend it to allow error handling, as well as work to take place while you are waiting to merge stuff.

.code files/forkmerge2.go

###########
# SLIDE 26
###########
* Timeout anything
- Select with timeout. Lets you timeout any long running task!

.code files/timeout.go

###########
# SLIDE 27
###########
* The Wats

###########
# SLIDE 28
###########
* Go Gotchas
- Variable shadowing ( :=, though convenient, can sometimes cause problems in nested scopes )

- Lack of generics

- interfaces and nil (assigning to nil, passing nil as function arg)
# Rules around when an interface value == nil can be confusing.

- boxing weirdness

- Calling *defer* can be a perf issue in tight loops.
# Adds an object allocation and a push/pop at runtime. 


###########
# SLIDE 29
###########
* Dealing With A Lack Of Generics
- Use Functional style operating on primitives or simple stucts.
# Because Go structs force you to model your data independently from api/code. You can often express something that would have traditionally used generics in a language like Java, simply by using lambdas and regular functions on basic data types. You can decompose your problem functionally to express "generic" algorithms without needing to define actual generic containers or methods.

- Define interfaces in places where you want a covariant generic assignment.
# This unfortunately sometimes ends up violating DRY when concrete structs have to have their own implementations for methods to conform to an interface, but struct embedding can provide "implementation inheritance" to work around this for many use cases. Though this doesn't help you in situations where you want to treat a stuct polymorphically though, since Go doesn't support actual polymorphic dispatch. I find for the most part that when I would think to use polymorphism, I can actually get away with using some functional stuff from #1.

- .(type) switching on the empty interface{}
#This unfortunately turns what would have been a class of compile time errors in to runtime errors. But Go does have really good affordances for "safe" casting at runtime to concrete types. And for the most part this hasn't been a huge issue.

- Reflection.
# This is basically the "escape hatch " when you just can't do it anyway else, and writing a bunch of implementations would make you jump off a bridge. But yeah, it's there.

# So while I agree Go would benefit from some simple generics in certain circumstances. In practice, I don't find I need them, because there are patterns what work super well for the use cases I tend to care about.﻿

